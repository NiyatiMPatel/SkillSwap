╔════════════════════════════════════════════════════════════════╗
║             SkillSwap Docker Quick Reference                   ║
╚════════════════════════════════════════════════════════════════╝

📋 PREREQUISITES
  ✓ Docker Desktop installed
  ✓ Docker Compose v2.0+

🚀 QUICK START (3 STEPS)
  1. cp .env.docker .env
  2. docker-compose up
  3. Open http://localhost:3000

⚙️ COMMON COMMANDS

  Development Mode:
    docker-compose up                 # Start all services
    docker-compose up -d              # Start in background
    docker-compose down               # Stop all services
    docker-compose logs -f            # View logs (follow)
    docker-compose ps                 # View running containers

  Production Mode:
    docker-compose -f docker-compose.prod.yml build
    docker-compose -f docker-compose.prod.yml up -d

  Rebuild:
    docker-compose build              # Rebuild all
    docker-compose build --no-cache   # Clean rebuild
    docker-compose down -v            # Remove volumes too

  Service-Specific:
    docker-compose logs server        # Server logs only
    docker-compose logs client        # Client logs only
    docker-compose logs mongodb       # Database logs only
    docker-compose restart server     # Restart server only

  Shell Access:
    docker-compose exec server sh     # Server container
    docker-compose exec client sh     # Client container
    docker-compose exec mongodb mongosh -u admin -p password123

🌐 PORTS
  Frontend:  http://localhost:3000
  Backend:   http://localhost:5000/api
  MongoDB:   mongodb://localhost:27017

📦 SERVICES
  ┌──────────┬───────────────────┬──────────┬────────────────┐
  │ Service  │ Container Name    │ Port     │ Image          │
  ├──────────┼───────────────────┼──────────┼────────────────┤
  │ Client   │ skillswap-client  │ 3000     │ node:18-alpine │
  │ Server   │ skillswap-server  │ 5000     │ node:18-alpine │
  │ MongoDB  │ skillswap-mongodb │ 27017    │ mongo:7.0      │
  └──────────┴───────────────────┴──────────┴────────────────┘

🔍 HEALTH CHECKS
  curl http://localhost:5000/api/health
  docker-compose exec mongodb mongosh --eval "db.runCommand({ping: 1})"

🛠️ TROUBLESHOOTING

  Port already in use:
    • Edit .env and change SERVER_PORT or CLIENT_PORT
    • Or: npx kill-port 5000 (Windows/Mac)

  Container won't start:
    docker-compose down
    docker-compose build --no-cache
    docker-compose up

  Database connection error:
    docker-compose logs mongodb
    docker-compose restart mongodb

  Clear everything:
    docker-compose down -v
    docker system prune -a  (removes all unused data)

  View container resource usage:
    docker stats

📂 FILES OVERVIEW
  docker-compose.yml          # Development config
  docker-compose.prod.yml     # Production config
  .env.docker                 # Environment template
  .env                        # Your config (create this)
  DOCKER.md                   # Full documentation
  DOCKER_FILES_SUMMARY.md     # Files overview

  server/Dockerfile           # Backend container
  server/.dockerignore        # Backend ignore rules

  client/Dockerfile           # Frontend container
  client/nginx.conf           # Nginx config (prod)
  client/.dockerignore        # Frontend ignore rules

🔐 DEFAULT CREDENTIALS (Change in production!)
  MongoDB:
    Username: admin
    Password: password123
    Database: skillswap

  JWT_SECRET: your_super_secret_key_change_in_production

⚠️ IMPORTANT NOTES
  • Never commit .env file to git
  • Change passwords before production deployment
  • Use docker-compose.prod.yml for production
  • MongoDB data persists in named volumes
  • Development mode has hot reload enabled

📚 MORE INFO
  See DOCKER.md for comprehensive documentation
  See README.md for application overview

═══════════════════════════════════════════════════════════════════
Last Updated: October 2024
