# Production Docker Compose Configuration
# Use this file for production deployments

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: skillswap-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-skillswap}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - skillswap-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: skillswap-server-prod
    restart: always
    ports:
      - "${SERVER_PORT:-5000}:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DB_NAME:-skillswap}?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CLIENT_URL: ${CLIENT_URL}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - skillswap-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:5000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: skillswap-client-prod
    restart: always
    ports:
      - "${CLIENT_PORT:-80}:80"
    environment:
      NODE_ENV: production
    depends_on:
      - server
    networks:
      - skillswap-network

networks:
  skillswap-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
